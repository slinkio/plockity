<div class="hero hero-frontpage">
  <div class="hero-content margin-top">
    {{#slide-show}}
      <div class="slide-container s-1">
        {{plockity-bot}}
        <div class="slide-text-container">
          <h1>Meet Plockity Bot</h1>
          <p>
            Plockity Bot makes sure your data is safe and secure from anything and everything using blowfish ciphering.
          </p>
        </div>
      </div>
      <div class="slide-container s-2">
        {{server-rack}}
        <div class="slide-text-container">
          <h1>Asynchronously Fast</h1>
          <p>
            Built on Node.js, Plockity provides a stable, fast and scalable encryption infrastructure for your applications.
          </p>
        </div>
      </div>
    {{/slide-show}}
  </div>
  <div class="initial-bg"></div>
  <div class="next-bg"></div>
  <div class="constant-bg"></div>
</div>

<div class="content-wrapper">
  {{#unless session.authenticated}}
    {{render "dropin-signup"}}
  {{/unless}}

  <div class="row blerbs container">
    <div class="col-md-4 blerb">
      <h1><i class="fa fa-fw fa-lock blerb-icon"></i> Secure</h1>
      <p>Extremely secure Blowfish ciphering keeps passwords safe and secure against brute force, rainbow table, and other hacking methods.</p>
    </div>

    <div class="col-md-4 blerb">
      <h1><i class="fa fa-fw fa-flask blerb-icon"></i> Transparent</h1>
      <p>We only compare your data, never decrypting to do so. Hashes are transparent, meaning even internal staff can never decrypt your plocked data.</p>
    </div>

    <div class="col-md-4 blerb">
      <h1><i class="fa fa-fw fa-cloud blerb-icon"></i> Try it for free</h1>
      <p>Enjoy peace of mind, secure data, and fast logins; up to 3K requests for free.</p>
    </div>
  </div>

  <div class="container callout callout-code">
    <h1><i class="fa fa-fw fa-code"></i> Easy to install and use</h1>
    <hr />
    <p class="text-center">
      <i class="fa fa-fw fa-info-circle"></i> This example is for <strong>Node.js</strong>. See our {{#link-to 'docs'}}api docs{{/link-to}} for interfacing directly with the Plockity API or for more Node.js examples.
    </p>
    <hr />
    <section class="code-section text-center">
      <h3><i class="fa fa-fw fa-download"></i> Install</h3>
      <p>With npm installed run the following in your node project.</p>
      <code>npm install plockity --save</code>
      <p class="help-block">Adding the <code>--save</code> flag adds plockity to your <code>package.json</code> file.</p>
    </section>
    <hr />
    <section class="code-section">
      <h3><i class="fa fa-fw fa-plug"></i> Config &amp; Connect</h3>
      <p>Make sure you have your app key handy.</p>
      <div class="markdown-body">
        <div class="highlight highlight-javascript">
          <pre><span class="pl-k">var</span> PlockityAdapter <span class="pl-k">=</span> <span class="pl-c1">require</span>(<span class="pl-s"><span class="pl-pds">'</span>plockity-node<span class="pl-pds">'</span></span>);<br /><span class="pl-k">var</span> plockityApp <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">PlockityAdapter</span>({<br />  apiKey<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>myAPIKey<span class="pl-pds">'</span></span><br />});</pre>
        </div>
      </div>
    </section>
    <hr />
    <section class="code-section">
      <h3><i class="fa fa-fw fa-cloud-upload"></i> Insert</h3>
      <p>Pass a plain-text key (like an email address), and the data to be encrypted.</p>
      <div class="markdown-body">
        <div class="highlight highlight-javascript">
          <pre>locker.vault.insert(<span class="pl-s"><span class="pl-pds">'</span>mydatakey<span class="pl-pds">'</span></span>, {<br />  ssn<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>123456789<span class="pl-pds">'</span></span>,<br />  name<span class="pl-k">:</span> {<br />    first<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>willy<span class="pl-pds">'</span></span>,<br />    last<span class="pl-k">:</span>  <span class="pl-s"><span class="pl-pds">'</span>wonka<span class="pl-pds">'</span></span><br />  }<br />}, {<br />  disableEncryption<span class="pl-k">:</span> [<br />    <span class="pl-s"><span class="pl-pds">'</span>name<span class="pl-pds">'</span></span><br />  ]<br />}).then(<span class="pl-k">function</span> ( <span class="pl-smi">result</span> ) {<br />  <span class="pl-en">console</span><span class="pl-c1">.log</span>( result.<span class="pl-c1">name</span>.first ); <span class="pl-c">// "willy"</span><br />  <span class="pl-en">console</span><span class="pl-c1">.log</span>( result.ssn );        <span class="pl-c">// undefined</span><br />}).catch(handleError);<br /></pre>
        </div>
      </div>
    </section>
    <hr />
    <section class="code-section">
      <h3><i class="fa fa-fw fa-pencil"></i> Update</h3>
      <div class="markdown-body">
        <div class="highlight highlight-javascript">
          <pre>plockityApp.vault.update(<span class="pl-s"><span class="pl-pds">'</span>mydatakey<span class="pl-pds">'</span></span>, { ssn<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>123456788<span class="pl-pds">'</span></span> }).then(<span class="pl-k">function</span> ( <span class="pl-smi">result</span> ) {<br /><span class="pl-c">  // Do something with the result</span><br />}).catch(handleError);</pre>
        </div>
      </div>
    </section>
    <hr />
    <section class="code-section">
      <h3><i class="fa fa-fw fa-search"></i> Compare</h3>
      <div class="markdown-body">
        <div class="highlight highlight-javascript">
          <pre>plockityApp.vault.compare(<span class="pl-s"><span class="pl-pds">'</span>mydatakey<span class="pl-pds">'</span></span>, { ssn<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>123456789<span class="pl-pds">'</span></span>, name<span class="pl-k">:</span> { first<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>willy<span class="pl-pds">"</span></span> } }).then(<span class="pl-k">function</span> ( <span class="pl-smi">result</span> ) {<br />  <span class="pl-en">console</span><span class="pl-c1">.log</span>( result.ssn );        <span class="pl-c">// false</span><br />  <span class="pl-en">console</span><span class="pl-c1">.log</span>( result.<span class="pl-c1">name</span>.first ); <span class="pl-c">// true</span><br />}).catch(handleError);</pre>
        </div>
      </div>
    </section>

  </div>
</div>{{! ./ Content wrapper }}
